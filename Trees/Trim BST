def trim(tree,min_val,max_val):
    if not tree:
        return

    tree.left = trim(tree.left,min_val,max_val) # We'r using postorder for this problem thats why we go left right data
    tree.right = trim(tree.right,min_val,max_val)

    if min_val <= tree.val <= max_val:
        return tree
    if tree.val < min_val:  # This why we used BST because if a node is smaller than min we can just eliminate
        # all the nodes that left of that node because left nodes must me smaller than parent node
        return tree.right
    if tree.val > max_val:  # Same goes for here
        return tree.left
        
