class BinaryTree(object):
    def __init__(self,root):
        self.key = root
        self.leftChild = None
        self.rightChild = None

    def insert_left(self,newNode):
        if self.leftChild == None:
            self.leftChild = BinaryTree(newNode)
        else:  # If there is a node in left we push that node down in the list
            t = BinaryTree(newNode)
            t.leftChild = self.leftChild
            self.leftChild = t

    def insert_right(self,newNode):
        if self.rightChild == None:
            self.rightChild = BinaryTree(newNode)
        else:  # If there is a node in left we push that node down in the list
            t = BinaryTree(newNode)
            t.rightChild = self.rightChild
            self.rightChild = t

    def get_right_child(self):
        return self.rightChild

    def get_left_child(self):
        return self.leftChild

    def set_root_val(self, obj):
        self.key = obj

    def get_root_val(self):
        return self.key

# Our tree is root = 5 leftchild 3 leftChild 2 and root = 5 rightChild 7 rightChild 8
def preorder(tree):  # The preorder traversal gives you front to back ordering.
    # first we get the node we are on then we jump to the left after that we jump right
    # aka. DLR = Data,left,right. This means we get the data first than we go to the left ant take it's data
    # if there is no more leftChild we go to the rightChild
    if tree:
        print(tree.get_root_val())
        preorder(tree.get_left_child())
        preorder(tree.get_right_child())


def postorder(tree):
    # In this method we go to leaf and start printing there
    # aka. LRD = left,right,data
    if tree != None:
        postorder(tree.get_left_child())
        postorder(tree.get_right_child())
        print(tree.get_root_val())


def inorder(tree):
    # In this method we go to most left value and start printing there
    # aka. LDR = left,data,right
    if tree != None:
        inorder(tree.get_left_child())
        print(tree.get_root_val())
        inorder(tree.get_right_child())



a = BinaryTree('5')
a.insert_left('2')
a.insert_left('3')
a.insert_right('8')
a.insert_right('7')

print("Preorder:")
preorder(a)
print("-----")
print("Postorder")
postorder(a)
print("-----")
print("Inorder")
inorder(a)
